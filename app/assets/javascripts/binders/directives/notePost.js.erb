'use strict';

angular.module('binderApp').directive('notePost', [
  '$sce',
  function($sce){
    return{
      restrict: 'E',
      templateUrl: "<%= asset_path('binders/templates/directives/notePost.html') %>",
      scope:{
        note: '=',
        setFocus: '=',
        removeNoteFromArray: '='
      },
      link: function(scope, element, attrs){
        scope.bod = $sce.trustAsHtml(scope.note.body);

        scope.setElementOffset = function(){
          element.offset(
            {
              left: parseInt(scope.note.hstore.x) + parseInt(box.left),
              top: parseInt(scope.note.hstore.y) + parseInt(box.top)
            }
          )
        }

        scope.firstCheck;

        var box = element[0].getBoundingClientRect();
        element.css('width', ('' + scope.note.hstore.width + 'px'));

        if(scope.note.hstore.height){
          element.css('height', ('' + scope.note.hstore.height + 'px'));
        }

        element.find('.resize-bar').on('click',function(){
          element.css('width', ('40px'));
          element.css('height', ('40px'));
        })

        element.css('position', 'absolute');
        scope.setElementOffset();



        element.on('dragend', function(e){
          scope.note.hstore.x = parseInt(scope.note.hstore.x) + parseInt(e.originalEvent.offsetX);
          scope.note.hstore.y = parseInt(scope.note.hstore.y) + parseInt(e.originalEvent.offsetY) - parseInt(element.height());

          scope.setElementOffset();
          scope.note.$save();
        })

        var getElementDimensions = function(){
          return {height: element.height(), width: element.outerWidth()}
        }

        element.on('drop', function(e){
          e.stopImmediatePropagation(); e.preventDefault();
          var src;

          if(e.originalEvent.dataTransfer){
            src = e.originalEvent.dataTransfer.getData("text/uri-list");
            scope.note.body = scope.note.body + "<img class=\"dropped-image\" src=\"" + src + "\">"
            scope.note.$save()
            scope.bod = $sce.trustAsHtml(scope.note.body);
          }
        })

        element.on('dragover dragenter', function(e){
          e.stopImmediatePropagation(); e.preventDefault();
        })



        element.on('mouseup', function(){
          scope.note.hstore.width = element.width();
          scope.note.hstore.height = element.height();
          scope.note.$save();
        })

        var bodyContainer = element.find('.body-container');

        if(scope.note.body == ''){
          bodyContainer.focus();
        }




        bodyContainer.on('input', function(){

          scope.note.debouncerSave(bodyContainer.html());
        })

        bodyContainer.on('blur', function(){
          if(scope.note.body == '' && bodyContainer.html() == ''){
            scope.removeNote();
          }
        })

        scope.showTopBar = false

        scope.showTopBarNow = function(){
          scope.showTopBar = !scope.showTopBar
          element.attr('draggable', scope.showTopBar);
        }


        scope.showPannel = function(){
          scope.showPanelCheck = !scope.showPanelCheck
        }

        scope.thCount = 1;
        scope.trCount = 1;
        scope.anchor = {};
        scope.src = {};

        scope.insertAnchor = function(){
          scope.showPannel();
          scope.note.body = scope.note.body + "<a contenteditable='false' href=" + scope.anchor.href + ">" + scope.anchor.text + "</a>";

          scope.bod = $sce.trustAsHtml(scope.note.body);
        }

        scope.insertImg = function(){
          scope.showPannel();
          scope.note.body = scope.note.body + "<img src=" + scope.img.src + ">";

          scope.bod = $sce.trustAsHtml(scope.note.body);
        }

        scope.insertTable = function(){
          scope.showPannel();

          scope.note.body = scope.note.body + "<table class='table table-bordered'>"

          scope.note.body = scope.note.body + '<thead><tr>'

          var thIteration = new Array(scope.thCount).fill(1)


          var trIteration = new Array(scope.trCount).fill(1)

          angular.forEach(thIteration, function(e,i){
            scope.note.body = scope.note.body + '<th></th>'
          })

          scope.note.body = scope.note.body + '</tr></thead>'

          scope.note.body = scope.note.body + '<tbody>'

          angular.forEach(trIteration, function(ee,ii){
            scope.note.body = scope.note.body + '<tr>'

            angular.forEach(thIteration, function(e,i){
              scope.note.body = scope.note.body + '<td></td>'
            })

            scope.note.body = scope.note.body + '</tr>'
          })


          // scope.note.body = scope.note.body + "</tbody></table>"

          scope.bod = $sce.trustAsHtml(scope.note.body);
        }

        scope.removeNote = function($event){
          if($event){$event.stopImmediatePropagation()}

          scope.removeNoteFromArray(scope.note);
          element.remove();
          scope.note.$delete();
        }

        scope.toggleTopBar = function(){
          scope.showTopBar = !scope.showTopBar;
        }
      }
    }
  }
]);
