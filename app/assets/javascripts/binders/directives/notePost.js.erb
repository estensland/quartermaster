'use strict';

angular.module('binderApp').directive('notePost', [
  '$sce',
  function($sce){
    return{
      restrict: 'E',
      templateUrl: "<%= asset_path('binders/templates/directives/notePost.html') %>",
      scope:{
        note: '=',
        setFocus: '=',
        removeNoteFromArray: '='
      },
      link: function(scope, element, attrs){
        scope.bod = $sce.trustAsHtml(scope.note.body);

        scope.setElementOffset = function(){
          element.offset(
            {
              left: parseInt(scope.note.hstore.x) + parseInt(box.left),
              top: parseInt(scope.note.hstore.y) + parseInt(box.top)
            }
          )
        }

        scope.firstCheck;

        var box = element[0].getBoundingClientRect();
        element.css('width', ('' + scope.note.hstore.width + 'px'));
        // element.css('width', ('0px'));
        // element.css('width', ('' + scope.note.hstore.width + 'px'));

        if(scope.note.hstore.height){
          element.css('height', ('' + scope.note.hstore.height + 'px'));
          // element.css('height', ('0px'));
          // element.css('height', ('' + scope.note.hstore.height + 'px'));
        }

        element.on('dblclick',function(){
          element.css('width', ('40px'));
          element.css('height', ('40px'));
        })

        element.css('position', 'absolute');
        scope.setElementOffset();

        element.attr('draggable', true)

        element.on('dragend', function(e){
          scope.note.hstore.x = parseInt(scope.note.hstore.x) + parseInt(e.originalEvent.offsetX);
          scope.note.hstore.y = parseInt(scope.note.hstore.y) + parseInt(e.originalEvent.offsetY) - parseInt(element.height());

          scope.setElementOffset();
          scope.note.$save();
        })

        var getElementDimensions = function(){
          return {height: element.height(), width: element.outerWidth()}
        }


        element.on('mouseup', function(){
          scope.note.hstore.width = element.width()
          scope.note.hstore.height = element.height()
          scope.note.$save();
        })

        var bodyContainer = element.find('.body-container');

        if(scope.note.body == ''){
          bodyContainer.focus();
        }

        bodyContainer.on('input', function(){
          if (scope.note.id){
            scope.note.body = bodyContainer.html();
            scope.note.$save();
          }
        })

        bodyContainer.on('blur', function(){
          if(scope.note.body == ''){
            scope.removeNote();
          }
        })

        scope.showTopBar = false

        scope.showTopBarNow = function(){
          scope.showTopBar = !scope.showTopBar
        }


        scope.removeNote = function($event){
          if($event){$event.stopImmediatePropagation()}

          scope.removeNoteFromArray(scope.note);
          element.remove();
          scope.note.$delete();
        }

        scope.toggleTopBar = function(){
          scope.showTopBar = !scope.showTopBar;
        }
      }
    }
  }
]);
