
'use strict';

angular
  .module('binderApp', [
    'ngAnimate',
    'ngResource',
    'ui.router',
    'ui.bootstrap'
]).config([
  '$httpProvider',
  '$locationProvider',
  '$stateProvider',
  '$urlRouterProvider',
  '$compileProvider',
  function($httpProvider, $locationProvider, $stateProvider, $urlRouterProvider, $compileProvider) {
    $locationProvider.html5Mode(true).hashPrefix('!');
    $compileProvider.debugInfoEnabled(<%= Rails.env.development? %>);

    var token = document.querySelector('meta[name="csrf-token"]');

    if(angular.isElement(token)){
      $httpProvider.defaults.headers.common['X-CSRF-Token'] = token.content;
    }
    $httpProvider.useApplyAsync(true);
    $httpProvider.defaults.headers.common['Authorization']  = '<%#
    ActionController::HttpAuthentication::Basic.encode_credentials(
      AUTH_CONFIG[:name],
      AUTH_CONFIG[:password]
    ) %>';

    // For any unmatched url, redirect to /state1
    $urlRouterProvider.
    otherwise("/");

    $stateProvider
    .state('root', {
      url: "/",
      templateUrl: "<%= asset_path('binders/templates/index.html') %>",
      controller: 'IndexController as indexCtrl',
      resolve: {
        notebooks: function($q, NotebookSvc){
          return $q(function(resolve, reject){
            NotebookSvc.resource.query().
            $promise.then(function(data) {
              resolve(data.notebooks);

            }, function(error){
              reject(error);
            });
          });
        }
      }
    })
    .state('notebook', {
      url: "/:binderi/notebooks/:id",
      templateUrl: "<%= asset_path('binders/templates/show.html') %>",
      controller: 'ShowController as showCtrl',
      resolve: {
        notebook: function($q, NotebookSvc, $stateParams){
          return $q(function(resolve, reject){
            NotebookSvc.resource.query({id: $stateParams.id}).
            $promise.then(function(data) {
              resolve(data.notebook);

            }, function(error){
              reject(error);
            });
          });
        },
        binder: function($q, BinderSvc, $stateParams){
          return $q(function(resolve, reject){
            BinderSvc.resource.query({binderi: $stateParams.binderi}).
            $promise.then(function(data) {
              resolve(data.binder);
            }, function(error){
                          console.log('aaaaa')
              reject(error);
            });
          });
        }
      }
    })
 }]);
