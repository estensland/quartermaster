'use strict';

angular.module('binderApp')
  .controller('ShowController', [
      'notebook',
      'binder',
      'shelf',
      'NotebookSvc',
      'DividerSvc',
      '$state',
      '$scope',
      function(notebook, binder, shelf, NotebookSvc, DividerSvc, $state, $scope) {


        //////////////////////////////////
        // Set Up
        //////////////////////////////

        var showCtrl = this;
        showCtrl.notebook = NotebookSvc.build(notebook);
        showCtrl.binder = binder;
        showCtrl.shelf = shelf;
        showCtrl.notebooks = binder.notebooks;

        showCtrl.notebooks.forEach(function(nb){
          if(nb.id === showCtrl.notebook.id){
            nb = showCtrl.notebook;
          }
        })

        showCtrl.currentDivider = showCtrl.notebook.children[0];

        showCtrl.setCurrentDivider = function(divider){
          showCtrl.currentDivider = divider;
          divider.notes = divider.notes.sort(function(a,b){return parseInt(a.order) > parseInt(b.order)});
        }


        //////////////////////////////////
        // CRUD-NESS
        //////////////////////////////

        showCtrl.createNotebook = function(){
          var newNotebook = NotebookSvc.build({name: 'New Notebook', color_hex: binder.color_hex, binder_id: binder.id});

          newNotebook.$create(function(data){
            showCtrl.notebooks.push(newNotebook);
            $state.go('notebook', {binder_id: binder.id, id: data.id});
          });

        }

        showCtrl.updateDivider = function(divider){
          divider.$save();
        }

        showCtrl.updateNotebook = function(){
          showCtrl.notebook.$save();
        }

        showCtrl.addChildDivider = function(object){
          var displayOrder = object.children.length;
          var newDivider = DividerSvc.build({name: 'New Divider', parent_id: object.id, parent_type: 'Divider', display_order: displayOrder});

          newDivider.$create(function(data){
            object.children.push(newDivider);
            showCtrl.setCurrentDivider(newDivider);
          });
        }


        //////////////////////////////////
        // Drag Fun
        //////////////////////////////

        var element = $('directory-tree')

        showCtrl.dragmode = false;
        showCtrl.dragova = false;
        element.on('dragstart', 'li', function(e){
          e.stopPropagation();
          showCtrl.dragmode = e.originalEvent.target.attributes.dividerId.value;

          setTimeout(function(){
            angular.forEach(element.find('directory-entry'), function(el){
              if(el.attributes['child-id'].value != showCtrl.dragmode){
                el.attributes['child-id'] = el.attributes['child-id'] || {};
                $(el).before("<li class=\"drop-zone\" before=\"" + el.attributes['child-id'].value + "\" ></li>");
                if($($(el).find('li')[0]).hasClass('last-of-list')){
                  $(el).after("<li class=\"drop-zone\" after=\"" + el.attributes['child-id'].value + "\"></li>");
                }
              }
            })
          }, 5)
        })

        var cycleChildren = function(children, id){
          var match;
          children.forEach(function(child){
            if(parseInt(child.id) === parseInt(id)){
              match = child
            }
            else if(!match && child.children.length > 0){
              match =  cycleChildren(child.children, id)
            }
          })
          return match;
        }

        showCtrl.reOrganizeTree = function(dividerId, newSibId, relation){
          var movedDivider, newSibDivider, localeParent, newParent;

          movedDivider  = cycleChildren(showCtrl.notebook.children, dividerId);
          newSibDivider = cycleChildren(showCtrl.notebook.children, newSibId);
          localeParent  = {id: newSibDivider.parent_id, type: newSibDivider.parent_type}

          if (localeParent === 'Notebook') {
            newParent = showCtrl.notebook ;
          }
          else{
            newParent = cycleChildren(showCtrl.notebook.children, localeParent.id);
          };

          var localeOrdering = newSibDivider.display_order;

          movedDivider.parent_id = localeParent.id;
          movedDivider.parent_type = localeParent.type;

          var indexCounter = 0;

          newParent.children.forEach(function(child){
            if(movedDivider != child){
              if(newSibDivider === child){
                if (relation === 'before') {
                  movedDivider.display_order = indexCounter;
                  indexCounter ++;
                  child.display_order = indexCounter;
                } else{
                  child.display_order = indexCounter;
                  indexCounter ++;
                  movedDivider.display_order = indexCounter;
                };
                movedDivider.$save();
              }
              else{
                child.display_order = indexCounter;
              }
              child.$save();
              indexCounter ++;
            }
          });

          window.location.reload();
        }


        element.on('dragend', 'li', function(e){
          e.stopPropagation();

          if(showCtrl.dragova){
            var newSibId, relation;

            if(showCtrl.dragova.attributes['before']){
              relation = 'before';
              newSibId = showCtrl.dragova.attributes['before'].value;
            }
            else if(showCtrl.dragova.attributes['after']){
              relation = 'after';
              newSibId = showCtrl.dragova.attributes['after'].value;
            }

            if(relation && newSibId){
              showCtrl.reOrganizeTree(showCtrl.dragmode, newSibId, relation)
            }
          }

          // Clear drag mode
          showCtrl.dragmode = false;
          $(".drop-zone").remove()
        })

        element.on('dragenter', '.drop-zone', function(e){
          var el = e.originalEvent.target

          $('.dragover').removeClass('dragover');
          if(el.parentElement != showCtrl.dragmode){
            $(el).addClass('dragover');
            showCtrl.dragova = el
          }
        })

        element.on('mousemove', 'directory-tree', function(e){
          if(showCtrl.dragmode){
            $(window).scrollTop($(window).scrollTop() + (clickY - e.pageY));
          }
        })


        //////////////////////////////////
        // Color Changing
        //////////////////////////////

        showCtrl.colors = [
          '0000FF',
          '3275F0',
          '3275F0',
          '7373DE',
          '00BFFF',
          '90C3D4',
          'FF0000',
          'FF0055',
          'D17777',
          'FF4000',
          'D4A190',
          '00FF00',
          'A1D490',
          'FF00FF',
          'FA4DFA',
          'C390D4',
          'FFFF00',
          'D4C390',
          '92C779',
          'C78779',
          '00FFFF',
          '79BEC7',
          'FF00FF',
          'C779A3',
          '000000',
          '111111',
          '333333',
          'DDDDDDD'
        ];

        showCtrl.colorIndex = 0;

        showCtrl.incrementColorIndex = function(){
          showCtrl.colorIndex ++;
          if(showCtrl.colors.length === showCtrl.colorIndex){
            showCtrl.colorIndex = 0;
          }
        }

        showCtrl.changeColor = function(notebook, $event){
          $event.preventDefault();
          $event.stopImmediatePropagation();

          var newColor = showCtrl.colors[showCtrl.colorIndex];
          notebook.color_hex = newColor;
          showCtrl.updateNotebook(notebook);
          notebook.$save();
          showCtrl.incrementColorIndex();
        }
      }
  ]);
